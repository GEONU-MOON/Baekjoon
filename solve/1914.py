def hanoi_tower(n, start, end) :
    if n == 1 :
        print(start, end)
        return
     
    hanoi_tower(n-1, start, 6-start-end) # 1단계
    print(start, end) # 2단계
    hanoi_tower(n-1, 6-start-end, end) # 3단계

n = int(input())
print(2**n-1)
if n <= 20 :
    hanoi_tower(n, 1, 3)
    
    # n : 원판 개수
    # start, end : n개의 원판을 몇번 막대에서 몇번 막대로 옮기겠다는 변수

    # 재귀함수의 경우 종료조건이 꼭 있어야 한다. 종료조건이 있지 않다면, 무한으로 빠질 가능성이 있기 때문이다.
    # 원판(n)이 마지막 1개 남았을 때, 1번막대에서 3번막대로 옮기면서 종료가 되고, 이는 모든 경우가 다 동일하게 1→3이기 때문에 print문으로 출력하고 return 해준다.
    
    # 1단계
    # start막대(1번 막대)에 있는 n개의 원판 중 n-1개의 원판을 end막대(3번 막대)가 아닌 2번 막대로 옮긴다.
    # 이때 start와 end는 번호를 알지만 나머지 막대의 번호를 알지 못한다.
    # 하지만 start, end막대와, 중간 막대를 다 합치면 6이 된다!(1+2+3)
    # 따라서 2번 막대로 옮기는 식은 6-start-end 이다.
    
    # 2단계
    # start막대에서 end막대로 옮겨주면 된다.
    
    # 3단계
    # 1단계와 같은 메커니즘으로 작동한다. 2번 막대에 있던 n-1개의 원판을 end막대(3번 막대)로 옮겨준다.
    # 또한 이때, n-1을 해주어 원판의 개수도 줄여줘야 한다.
    
    # 메인함수 부분은 입력부분, 이동횟수 출력, hanoi_tower함수를 호출해 과정 출력한다.
    # 문제 조건에서 n이 20개 이하일 경우는 과정을 출력하고, 20개 초과가 되면 과정을 출력하지 않는다